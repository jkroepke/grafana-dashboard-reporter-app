apiVersion: 1

apps:
  - type: mahendrapaipuri-dashboardreporter-app
    org_id: 1
    org_name: Main Org.
    disabled: false
    
    secureJsonData:
      # If operators want to generate reports programatically using API requests with 
      # clients like, say `curl`, using service account tokens it is necessary to configure
      # that **same** service account token in the plugin's config.
      #
      # Grafana will use this token to make API requests to Grafana
      # to fetch dashboards and panels. The token must have appropriate permissions
      # and roles to be able to generate reports.
      #
      # This token can be configured from the Grafana UI as well.
      #
      # In Grafana >= 10.3.0, by enabling `externalServiceAccounts` feature flag, this
      # provisioning of the service account token is done automatically and there is
      # no need to set the token in the config
      saToken: ''

    jsonData:
      # appUrl is at which Grafana can be accessible. The plugin will make API requests
      # to Grafana to get individual panel in each dashboard to generate reports. These API
      # requests will be made to this URL. For most of the deployments the default value 
      # will work. 
      # 
      # If the Grafana is configured to use cookie_samesite "strict", the default localhost:3000
      # will not work as the plugin will forward cookie in the API requests and "strict" policy
      # will not make cookie set on URL Grafana is exposed (eg mygrafana.example.com) on 
      # localhost:3000. In this case, please use appUrl as `mygrafana.example.com`
      # 
      # The app URL set in GF_APP_URL env variable will always have the highest precedence
      # and will override the value set here
      #
      appUrl: http://localhost:3000

      # If Grafana is using HTTPS with self signed certificates, set this parameter to true
      # to skip TLS certificate verification
      #
      skipTlsCheck: false

      # Orientation of the report. Possible values are portrait and landscape
      #
      # This can be changed from Grafana UI as well and this configuration parameter
      # applies globally to all generated reports
      #
      # This setting can be overridden for a particular dashboard by using query parameter
      # ?orientation=portrait or ?orientation=landscape during report generation process
      #
      orientation: portrait

      # Layout of the report. Possible values are simple and grid
      #
      # This can be changed from Grafana UI as well and this configuration parameter
      # applies globally to all generated reports
      #
      # This setting can be overridden for a particular dashboard by using query parameter
      # ?layout=simple or ?layout=grid during report generation process
      #
      layout: simple

      # Dashboard mode in the report. Possible values are default and full. In default
      # mode collapsed rows will be ignored in the report and only Panels visible in 
      # dashboard by default will be rendered in the report. In the full mode, all the
      # rows will be expanded and all the panels in the dashboard will be included in
      # the report.
      #
      # This can be changed from Grafana UI as well and this configuration parameter
      # applies globally to all generated reports
      #
      # This setting can be overridden for a particular dashboard by using query parameter
      # ?dashboardMode=default or ?dashboardMode=full during report generation process
      #
      dashboardMode: default

      # Time zone to use the report. This should be provided in IANA format.
      # More details on IANA format can be obtained from https://www.iana.org/time-zones
      # Eg America/New_York, Asia/Singapore, Australia/Melbourne, Europe/Berlin
      #
      # If empty or an invalid format is provided, the plugin defaults to using local
      # location of the Grafana server.
      #
      # This setting can be overridden for a particular dashboard by using query parameter
      # ?timeZone=America%2FNew_York during report generation process. Note that we 
      # need to escape URL characters
      #
      timeZone: ''

      # Branding logo in the report.
      #
      # A base64 encoded of the logo can be set which will be included in the footer
      # of the report in each page.
      #
      logo: ''

      # Maximum number of workers for generating panel PNGs.
      #
      # This can be changed from Grafana UI as well and this configuration parameter
      # applies globally to all generated reports
      #
      maxRenderWorkers: 2

      # Report template to use for generating reports. This is an advanced feature.
      # This can be used to customize the report generation process. The template should be
      # a valid Go template.
      #
      headerTemplate: ''
      reportTemplate: ''
      footerTemplate: ''
